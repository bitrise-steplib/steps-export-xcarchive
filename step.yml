title: Export iOS and tvOS Xcode archive
summary: Export iOS and tvOS IPA from an existing Xcode archive
description: |-
  Exports an IPA from an existing iOS and tvOS `.xcarchive` file. You can add multiple **Export iOS and tvOS Xcode archive** Steps to your Workflows to create multiple different signed .ipa files.
  The Step also logs you into your Apple Developer account based on the [Apple service connection you provide on Bitrise](https://devcenter.bitrise.io/en/accounts/connecting-to-services/apple-services-connection.html) and downloads any provisioning profiles needed for your project based on the **Distribution method**.

  ### Configuring the Step
  Before you start:
  - Make sure you have connected your [Apple Service account to Bitrise](https://devcenter.bitrise.io/en/accounts/connecting-to-services/apple-services-connection.html).
  Alternatively, you can upload certificates and profiles to Bitrise manually, then use the Certificate and Profile installer step before Xcode Archive
  - Make sure certificates are uploaded to Bitrise's **Code Signing** tab. The right provisioning profiles are automatically downloaded from Apple as part of the automatic code signing process.

  To configure the Step:
  1. **Archive Path**: Specifies the archive that should be exported. The input value sets xcodebuild's `-archivePath` option.
  2. **Select a product to distribute**: Decide if an App or an App Clip IPA should be exported.
  3. **Distribution method**: Describes how Xcode should export the archive: development, app-store, ad-hoc, or enterprise.

  Under **Automatic code signing**:
  1. **Automatic code signing method**: Select the Apple service connection you want to use for code signing. Available options: `off` if you don't do automatic code signing, `api-key` [if you use API key authorization](https://devcenter.bitrise.io/en/accounts/connecting-to-services/connecting-to-an-apple-service-with-api-key.html), and `apple-id` [if you use Apple ID authorization](https://devcenter.bitrise.io/en/accounts/connecting-to-services/connecting-to-an-apple-service-with-apple-id.html).
  2. **Register test devices on the Apple Developer Portal**: If this input is set, the Step will register the known test devices on Bitrise from team members with the Apple Developer Portal. Note that setting this to `yes` may cause devices to be registered against your limited quantity of test devices in the Apple Developer Portal, which can only be removed once annually during your renewal window.
  3. **The minimum days the Provisioning Profile should be valid**: If this input is set to >0, the managed Provisioning Profile will be renewed if it expires within the configured number of days. Otherwise the Step renews the managed Provisioning Profile if it is expired.
  4. The **Code signing certificate URL**, the **Code signing certificate passphrase**, the **Keychain path**, and the **Keychain password** inputs are automatically populated if certificates are uploaded to Bitrise's **Code Signing** tab. If you store your files in a private repo, you can manually edit these fields.

  Under **IPA export configuration**:
  1. **Developer Portal team**: Add the Developer Portal team's name to use for this export. This input defaults to the team used to build the archive.
  2. **Rebuild from bitcode**: For non-App Store exports, should Xcode re-compile the app from bitcode?
  3. **Include bitcode**: For App Store exports, should the package include bitcode?
  4. **iCloud container environment**: If the app is using CloudKit, this input configures the `com.apple.developer.icloud-container-environment` entitlement. Available options vary depending on the type of provisioning profile used, but may include: `Development` and `Production`.
  5. **Export options plist content**: Specifies a `plist` file content that configures archive exporting. If not specified, the Step will auto-generate it.

  Under Debugging:
  1. **Verbose logging***: You can set this input to `yes` to produce more informative logs.
website: https://github.com/bitrise-steplib/steps-export-xcarchive
source_code_url: https://github.com/bitrise-steplib/steps-export-xcarchive
support_url: https://github.com/bitrise-steplib/steps-export-xcarchive/issues
project_type_tags:
- ios
- cordova
- ionic
- react-native
- flutter
- xamarin
type_tags:
- utility
is_always_run: false
is_skippable: false
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-export-xcarchive
inputs:
- archive_path: $BITRISE_XCARCHIVE_PATH
  opts:
    title: Archive path
    summary: Specifies the archive that should be exported.
    description: |-
      Specifies the archive that should be exported.

      The input value sets xcodebuild's `-archivePath` option.
    is_required: true

- product: app
  opts:
    title: Select a product to distribute
    summary: Describes which product to export.
    value_options:
    - app
    - app-clip
    is_required: true

- distribution_method: development
  opts:
    title: Distribution method
    summary: Describes how Xcode should export the archive.
    value_options:
    - development
    - app-store
    - ad-hoc
    - enterprise
    is_required: true

# Automatic code signing

- automatic_code_signing: "off"
  opts:
    category: Automatic code signing
    title: Automatic code signing method
    summary: This input determines which Bitrise Apple service connection should be used for automatic code signing.
    description: |-
      This input determines which Bitrise Apple service connection should be used for automatic code signing.

      Available values:
      - `off`: Do not do any auto code signing.
      - `api-key`: [Bitrise Apple Service connection with API Key](https://devcenter.bitrise.io/getting-started/connecting-to-services/setting-up-connection-to-an-apple-service-with-api-key/).
      - `apple-id`: [Bitrise Apple Service connection with Apple ID](https://devcenter.bitrise.io/getting-started/connecting-to-services/connecting-to-an-apple-service-with-apple-id/).
    value_options:
    - "off"
    - api-key
    - apple-id
    is_required: true

- register_test_devices: "no"
  opts:
    category: Automatic code signing
    title: Register test devices on the Apple Developer Portal
    summary: If this input is set, the Step will register the known test devices on Bitrise from team members with the Apple Developer Portal.
    description: |-
      If this input is set, the Step will register the known test devices on Bitrise from team members with the Apple Developer Portal.

      Note that setting this to yes may cause devices to be registered against your limited quantity of test devices in the Apple Developer Portal, which can only be removed once annually during your renewal window.
    value_options:
    - "yes"
    - "no"
    is_required: true

- min_profile_validity: "0"
  opts:
    category: Automatic code signing
    title: The minimum days the Provisioning Profile should be valid
    summary: If this input is set to >0, the managed Provisioning Profile will be renewed if it expires within the configured number of days.
    description: |-
      If this input is set to >0, the managed Provisioning Profile will be renewed if it expires within the configured number of days.

      Otherwise the Step renews the managed Provisioning Profile if it is expired.
    is_required: true

- certificate_url_list: $BITRISE_CERTIFICATE_URL
  opts:
    category: Automatic code signing
    title: Code signing certificate URL
    summary: URL of the code signing certificate to download.
    description: |-
      URL of the code signing certificate to download.

      Multiple URLs can be specified, separated by a pipe (`|`) character.

      Local file path can be specified, using the `file://` URL scheme.
    is_required: true
    is_sensitive: true

- passphrase_list: $BITRISE_CERTIFICATE_PASSPHRASE
  opts:
    category: Automatic code signing
    title: Code signing certificate passphrase
    summary: Passphrases for the provided code signing certificates.
    description: |-
      Passphrases for the provided code signing certificates.

      Specify as many passphrases as many Code signing certificate URL provided, separated by a pipe (`|`) character.
    is_required: true
    is_sensitive: true

- keychain_path: $HOME/Library/Keychains/login.keychain
  opts:
    category: Automatic code signing
    title: Keychain path
    summary: Path to the Keychain where the code signing certificates will be installed.
    is_required: true
    is_dont_change_value: true

- keychain_password: $BITRISE_KEYCHAIN_PASSWORD
  opts:
    category: Automatic code signing
    title: Keychain password
    summary: Password for the provided Keychain.
    is_required: true
    is_sensitive: true
    is_dont_change_value: true

# IPA export configuration

- export_development_team:
  opts:
    category: IPA export configuration
    title: Developer Portal team
    summary: The Developer Portal team to use for this export.
    description: |-
      The Developer Portal team to use for this export.

      Defaults to the team used to build the archive.

- compile_bitcode: "yes"
  opts:
    category: IPA export configuration
    title: Rebuild from bitcode
    summary: For __non-App Store__ exports, should Xcode re-compile the app from bitcode?
    value_options:
    - "yes"
    - "no"
    is_required: true

- upload_bitcode: "yes"
  opts:
    category: IPA export configuration
    title: Include bitcode
    summary: For __App Store__ exports, should the package include bitcode?
    value_options:
    - "yes"
    - "no"
    is_required: true

- manage_version_and_build_number: "no"
  opts:
    category: IPA export configuration
    title: Xcode manage version and build number (App Store Connect)
    summary: Should Xcode manage the app's build number when uploading to App Store Connect. This will change the version and build numbers of all content in your app only if the is an invalid number (like one that was used previously or precedes your current build number). The input will not work if `export options plist content` input has been set. Default set to No.
    value_options:
    - "yes"
    - "no"
    is_required: true

- export_options_plist_content:
  opts:
    category: IPA export configuration
    title: Export options plist content
    summary: Specifies a plist file content that configures archive exporting.
    description: |-
      Specifies a plist file content that configures archive exporting.

      If not specified, the Step will auto-generate it.

# Debugging

- verbose_log: "no"
  opts:
    category: Debugging
    title: Enable verbose logging
    summary: If this input is set, the Step will print additional logs for debugging.
    is_required: true
    value_options:
    - "yes"
    - "no"

outputs:
- BITRISE_IPA_PATH:
  opts:
    title: iOS or tvOS IPA
    summary: The created iOS or tvOS .ipa file's path.
- BITRISE_DSYM_PATH:
  opts:
    title: The created iOS or tvOS .dSYM zip file's path.
    summary: Step will collect every dsym (app dsym and framwork dsyms) in a directory, zip it and export the zipped directory path.
- BITRISE_IDEDISTRIBUTION_LOGS_PATH:
  opts:
    title: xcdistributionlogs
    summary: Path to the xcdistributionlogs zip
